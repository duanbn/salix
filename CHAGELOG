--Version 1.4.3 (DD20170206)
1. 基于Netty4将网络层代码进行重构，将salix-demo合并到salix中，salix进行模块化开发
2. 将com修改为org

--Version 1.4.2
1. fix bug
2. 添加请求和响应的日志
3. 添加自动扫描classpath根路径下的spring配置文件来启动服务
4. 完善平滑停止服务
5. 使用javassist来生成客户端动态代理对象

--Version 1.4.1
1. fix bug
2. 添加zookeeper作为配置中心
3. 优化服务器和客户端的定义方式
4. 优化连接池，修复连接断开时死锁问题

--Version 1.3.2
1. 使用mina重写服务器端
2. 使用Spring作为服务容器
3. 代码迁移到github
4. 项目重命名为salix
5. fix bug

2012-12-13
1. 当客户端使用的是连接池时，服务器端不能通过一个EndPoint来保持RpcBean的状态一个连接池会对应N个EndPoint(2012-12-18 完成)
2. 连接池只是一个初步简单的实现，还没有加入状态信息，目前使用还不安全(2012-12-17 完成)

2012-12-17
1. 对于枚举进行序列化(2012-12-25 完成)

2012-12-28
1. myrpc应用需要将接口与实现分离，注解要对实现进行注解，客户端只依赖应用的接口(2012-12-28 完成)

2013-1-4
1. 在服务器端添加拦截器组件
1.1 拦截器分为系统拦截器和用户拦截器，执行顺序暂定为先执行系统拦截器后执行用户拦截器(2013-1-4 完成)
2. 添加rpc日志组件，将rpc的输入输出信息写入io.log日志.(2012-1-4 完成)

2013-1-5
服务器集群功能
1. 当服务器重新启动时，客户端无法继续保持通讯(2012-1-6 完成)
2. 客户端需要有对服务器有集群的支持(完成)
3. 服务器端添加动态主从模式(完成)

2013-1-6
1. 当客户端和服务器通讯时发生内部错误则返回错误码(2013-1-6 完成)
2. 客户端对服务器集群进行监控(2013-1-6 完成)

2013-4-1
1. 服务器停止(2013-10-8 完成)

version 1.1.0
1.性能优化
1.1 动态代理使用cglib实现 (todo)
1.2 EndPoint的写出操作目前还是使用固定缓冲区，建议修改为动态分配 (2013-5-22完成)
1.3 CPU负载高,服务器端的OP_WRITE和OP_READ在任何情况下都监听，建议修改为需要的时候监听. (2013-6-4完成)
1.4 多线程客户端不比单线程客户端快,初步猜测服务器端的写数据性能较低 (todo)
1.5 序列化的时候不使用装箱和拆箱操作. (todo)

2. 功能完善
2.1 异常的提示如果是业务逻辑的应该抛出业务异常还不是RPC错误码 (2013-5-16完成)
2.2 服务器应该可以自我检查OOM (todo)
2.3 服务器加载不同的应用 (2013-6-7完成)
2.4 客户端使用nio的写法有问题，没有使用Selector，导致SocketChannel.read()方法阻塞(ignore)
2.5 当服务器端出现内部错误时，需要返回给客户端错误信息 (todo)
2.6 客户端健壮性完善当服务器停止时客户端无限次尝试重发(2013-10-31完成)

3. bug
3.1 当客户端是多线程调用时，会出现CPU 100%但是无数据交互 (fixed 3.2原因一致)
3.2 客户端receive消息会出现阻塞现象. (fixed 因为服务器端OOM导致socketchannel.read() blocked)
3.3 连接池存在问题，不能使用, 多线程调用时总是获取已经关闭的连接.(fixed)
3.4 加载不同的应用时无法获取rpc相关信息 (fixed)
3.5 加载jar的时候有些class无法加载 (fixed)
3.6 调用不同的app会出现ClassNotFoundException (fixed)
3.7 为了显示日志导致ReturnMessage将input args又返回给客户端. (fixed)

version 1.1.1
1. 功能完善
1.1 客户端进行广播式发现服务器.
